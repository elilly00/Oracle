-- JOIN : 하나 이상의 테이블에서 데이터를 조회하기 위해 사용 (결과는 하나의 RESULT SET이 나옴)
-- 사번, 사원 명, 부서코드, 부서 명 조회
SELECT EMPM_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE;
-- EMP_ID, EMP_NAME, EMP_CODE : EMPLOYEE
-- DEPT_TITLE : DEPARTMENT

SELECT EMP_ID, EMPT_NAME, DEPT_CODE
FROM EMPLOYEE;
SELECT DEPT_ID, DEPT_TITLE
FROM DEPARTMENT;

-- 내부 조인 (INNER JOIN) : 조인의 기본
-- 연결되는 컬럼의 값이 일치하는 행들만 조인 됨

-- [오라클 구문]
SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT       -- 모든 사원한테 모든 DEPT_TITLE이 돌아가면서 적용됨 (WHERE절을 통해 조건을 명시)
WHERE DEPT_CODE = DEPT_ID;      -- DEPT_CDOE가 NULL인 사원은 출력되지 않음 (DEPT_ID엔 NULL이 존재하지 않기 때문)
-- [ANSI 표준 구문]
-- ON : 비교할 컬럼 명이 다를 때
 SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE
 FROM EMPLOYEE
     JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);

-- 사번, 사원 명, 직급코드, 직급 명 조회
-- [오라클 구문]
SELECT EMP_ID, EMP_NAME, JOB_CODE, JOB_NAME
FROM EMPLOYEE, JOB
--WHERE JOB_CODE = JOB_CODE;  -- (열의 정의가 애매합니다.라는 에러 뜸) 컬럼명이 같아 어느 테이블에 있는 컬럼인지 구분 할 수 없음
WHERE EMPLOYEE.JOB_CODE = JOB.JOB_CODE; -- (열의 정의가 애매합니다.라는 에러 뜸) SELECT절의 JOB_CODE 때문. SELECT절에도 어느 테이블의 JOB_CODE인지 명시

SELECT EMP_ID, EMP_NAME, EMPLOYEE.JOB_CODE, JOB_NAME
FROM EMPLOYEE, JOB
WHERE EMPLOYEE.JOB_CODE = JOB.JOB_CODE;

-- 테이블 별칭 사용해서 테이블 명시 가능
SELECT EMP_ID, EMP_NAME, J.JOB_CODE, JOB_NAME
FROM EMPLOYEE E, JOB J
WHERE E.JOB_CODE = J.JOB_CODE;

-- [ANSI 표준 구문]
-- ON : 비교할 컬럼 명이 다를 때
--      컬럼 명이 같다면 어느 테이블에 속한 컬럼인지 알 수 있도록 테이블 명시
SELECT EMP_ID, EMP_NAME, EMPLOYEE.JOB_CODE, JOB_NAME
FROM EMPLOYEE
    JOIN JOB ON (JOB.JOB_CODE = EMPLOYEE.JOB_CODE);

-- USING : 비교할 컬럼 명이 같을 때
SELECT EMP_ID, EMP_NAME, JOB_CODE, JOB_NAME
FROM EMPLOYEE
    JOIN JOB USING (JOB_CODE); 

-- 부서 명과 해당 부서의 지역 명 조회
-- [오라클 구문]
SELECT DEPT_TITLE, LOCAL_NAME
FROM DEPARTMENT, LOCATION
WHERE LOCATION_ID = LOCAL_CODE;

-- [ANSI 표준 구문]
SELECT DEPT_TITLE, LOCAL_NAME
FROM DEPARTMENT 
    JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE);

-- 외부조인(OUTER JOIN)

-- LEFT [OUTER] JOIN : 왼편에 기술된 테이블의 컬럼 수를 기준으로 JOIN
-- [ANSI 표준 구문]
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
    LEFT /*OUTER*/ JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);    -- OUTER생략 가능

-- [오라클 구문]
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE = DEPT_ID(+);   
-- 기준을 맞춰주는 컬럼에 (+)를 붙이면 외부조인이 됨

-- RIGHT [OUTER] JOIN : 오른편에 기술된 테이블의 컬럼 수를 기준으로 JOIN
-- [ANSI 표준 구문]
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
    RIGHT /*OUTER*/ JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);

-- [오라클 구문]
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE(+) = DEPT_ID;

-- PULL [OUTER] JOIN : 두 테이블이 모두 기준이 되는 JOIN
-- [ANSI 표준 구문]
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
    FULL /*OUTER*/ JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);

-- [오라클 구문]
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE(+) = DEPT_ID(+);   -- ORA-01468: outer-join된 테이블은 1개만 지정할 수 있습니다
-- FULL OTER JOIN은 오라클로 표현 X

-- 다중 조인 : 순서 조인
-- 사번, 사원 명, 부서코드 부서 명, 지역 명
-- [오라클 구문]
SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE, DEPARTMENT, LOCATION
WHERE DEPT_CODE = DEPT_ID
      AND LOCAL_CODE = LOCATION_ID;

SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE,  LOCATION, DEPARTMENT
WHERE LOCAL_CODE = LOCATION_ID
      AND DEPT_CODE = DEPT_ID;
      
-- [ANSI 표준 구문]
SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
     JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
     JOIN LOCATION ON (LOCAL_CODE = LOCATION_ID );

SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
     JOIN LOCATION ON (LOCAL_CODE = LOCATION_ID )  
     JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);
-- [ERROR] : ORA-00904: "LOCATION_ID": 부적합한 식별자 
-- EMPLOYEE테이블과 LOCATION테이블은 서로 연결점이 없기 때문   
    
SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE, LOCAL_NAME
FROM DEPARTMENT
     JOIN LOCATION ON (LOCAL_CODE = LOCATION_ID ) 
     JOIN EMPLOYEE ON (DEPT_CODE = DEPT_ID);

-- 직급이 대리이면서 아시아 지역에 근무하는 직원 조회
-- 사번, 이름, 직급 명, 부서 명, 근무지역명, 급여
-- [오라클 구문]
SELECT EMP_ID, EMP_NAME, J.JOB_NAME, DEPT_TITLE, LOCAL_NAME, SALARY
FROM DEPARTMENT, EMPLOYEE E, JOB J, LOCATION
WHERE DEPT_ID = DEPT_CODE  -- DEPARTMENT과 EMPLOYEE 연결
      AND E.JOB_CODE = J.JOB_CODE   
      AND LOCATION_ID = LOCAL_CODE  -- DEPARTMENT과 LOCATEION 연결
      AND JOB_NAME  = '대리'
      AND LOCAL_NAME LIKE 'ASIA%';
      
-- [ANSI 표준 구문]
SELECT EMP_ID, EMP_NAME, JOB_NAME, DEPT_TITLE, LOCAL_NAME, SALARY
FROM DEPARTMENT
     JOIN EMPLOYEE ON (DEPT_ID = DEPT_CODE)
     JOIN JOB USING (JOB_CODE) 
     JOIN  LOCATION ON (LOCATION_ID = LOCAL_CODE)
WHERE JOB_NAME = '대리'
      AND LOCAL_NAME LIKE 'ASIA%';
      

      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      